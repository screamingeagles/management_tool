@model ManagementTool.Models.C008_TASK_DATA

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<br />
<div class="row">

    <div class="col-lg-10 col-lg-offset-1">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <div class="form-group">
                    <label class="col-lg-2 control-label">Select Following</label>
                    <div class="col-lg-4">
                        @Html.DropDownList("ProjectId", null, "Select Project", htmlAttributes: new { @class = "form-control m-b", onchange = "FillProjectDetails(this);" })
                    </div>
                    <div class="col-lg-5">
                        @using (Html.BeginForm("Create", "Tasks", FormMethod.Get)){
                            @Html.DropDownList("PhaseId", null, "Select Phase", htmlAttributes: new { @class = "form-control m-b", onchange = "this.form.submit()", disabled = "disabled" })
                        }
                    </div>
                </div>
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-10 col-lg-offset-1">
        <div class="ibox float-e-margins">
            <div class="ibox-title">
                <h5 id="dvDetails">Add New Task</h5>
                <div class="ibox-tools">
                    <a class="collapse-link">
                        <i class="fa fa-chevron-up"></i>
                    </a>
                    <a class="close-link">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="ibox-content">
                <div class="table-responsive">

                    @using (Html.BeginForm("Create", "Tasks", FormMethod.Post, new { id = "frmMain" }))
                    {
                        @Html.AntiForgeryToken();

                        <!-- / Service Id And Location -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Location</label>
                            <div class="col-lg-10">
                                <input type="text"  class="form-control m-b" disabled="disabled" name="Locatoin" id="Locatoin" style="background-color:lavenderblush; color:black" />
                            </div>
                        </div>

                        <!-- / Company And Division -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Company</label>
                            <div class="col-lg-4">
                                <input name="Company" id="Company" type="text" class="form-control m-b" disabled="disabled" style="background-color:lavenderblush; color:black" />
                            </div>
                            <label class="col-lg-2 control-label">Division</label>
                            <div class="col-lg-4">
                                <input name="Division" id="Division" type="text"  class="form-control m-b" disabled="disabled" style="background-color:lavenderblush; color:black" />
                            </div>
                        </div>

                        <!-- / Area And Sub Area -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Area</label>
                            <div class="col-lg-4">
                                <input name="Area" id="Area" type="text" class="form-control m-b" disabled="disabled" style="background-color:lavenderblush; color:black" />
                            </div>
                            <label class="col-lg-2 control-label">Sub Area</label>
                            <div class="col-lg-4">
                                <input name="SubArea" id="SubArea" type="text" class="form-control m-b" disabled="disabled" style="background-color:lavenderblush; color:black" />
                            </div>
                        </div>

                        <!-- / Project And Phase -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Project</label>
                            <div class="col-lg-4">
                                <input name="Project" id="Project" type="text" class="form-control m-b" disabled="disabled" style="background-color:lavenderblush; color:black" />
                            </div>
                            <label class="col-lg-2 control-label">Phase</label>
                            <div class="col-lg-4">
                                <input name="Phase" id="Phase" type="text" class="form-control m-b" disabled="disabled" style="background-color:lavenderblush; color:black" />
                            </div>
                        </div>

                        <!-- / Bucket And Sub Sub Phase -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Select Bucket</label>
                            <div class="col-lg-4">
                                @Html.DropDownList("BucketId", null, "Select Bucket", htmlAttributes: new { @onchange = "FillBucket(this);", @class = "form-control m-b" })
                            </div>
                            <label class="col-lg-2 control-label">Sub Phase</label>
                            <div class="col-lg-4">
                                <input name="SubPhase" id="SubPhase" type="text" class="form-control m-b" disabled="disabled" style="background-color:lavenderblush; color:black" />
                            </div>
                        </div>

                        <!-- / Task Name -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">New Task Name</label>
                            <div class="col-lg-10">
                                @Html.TextBoxFor(model => model.SName, htmlAttributes: new { @class = "form-control m-b", @placeholder = "Task Name" })
                            </div>
                        </div>

                         <!-- / Description -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Description</label>
                            <div class="col-lg-10">
                                <textarea class="form-control m-b" id="Description" name="Description" rows="2" cols="20"></textarea>                                
                            </div>
                        </div>

                        <!-- / Start date and End date -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Start Date</label>
                            <div class="col-lg-4">
                                @Html.TextBoxFor(model => model.StartDate, htmlAttributes: new { @class = "form-control m-b" })
                            </div>
                            <label class="col-lg-2 control-label">End Date</label>
                            <div class="col-lg-4">
                                @Html.TextBoxFor(model => model.Deadline, htmlAttributes: new { @class = "form-control m-b" })
                            </div>
                        </div>

                        <!-- / Select Owner and Generated by -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Select Owner</label>
                            <div class="col-lg-4">
                                <select class="form-control m-b" id="OwnerId" name="OwnerId">
                                    <option value="">Select Owner</option>                                    
                                @{
                                    foreach (SelectListItem a in ViewBag.OwnerId) {
                                        if (ViewBag.UserId.ToString() == a.Value.ToString()) {
                                            WriteLiteral("<option value=\"" + a.Value + "\" selected>" + a.Text + "</option>");
                                        } else {
                                            WriteLiteral("<option value=\"" + a.Value + "\" >" + a.Text + "</option>");
                                        }

                                    }
                                }    
                                </select>
                                
                            </div>
                            <label class="col-lg-2 control-label">Created By</label>
                            <div class="col-lg-4">
                                <input id="GeneratedBy" name="GeneratedBy" class="form-control m-b" value="@ViewBag.UserName" placeholder="Created By"  disabled="disabled">
                            </div>
                        </div>

                        <!-- / Type and Status -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Task Type</label>
                            <div class="col-lg-4">
                                @Html.DropDownList("TaskTypeId", null, "Select Type", htmlAttributes: new { @class = "form-control m-b" })
                            </div>
                            <label class="col-lg-2 control-label">Task Status</label>
                            <div class="col-lg-4">
                                @Html.DropDownList("StatusId", null, "Select Status", htmlAttributes: new { @class = "form-control m-b" })
                            </div>
                        </div>

                        <!-- / Man Days and Doc Links   -->
                        <div class="form-group">
                            <label class="col-lg-2 control-label">Man Days</label>
                            <div class="col-lg-4">
                                @Html.TextBoxFor(model => model.ManDays, htmlAttributes: new { @class = "form-control m-b", @placeholder = "Man Days" })
                            </div>
                            <label class="col-lg-2 control-label">Doc Links</label>
                            <div class="col-lg-4">
                                @Html.TextBoxFor(model => model.DocsLink, htmlAttributes: new { @class = "form-control m-b", @placeholder = "Document Links" })
                            </div>
                        </div>


                        <!-- / Save Button -->
                        <div class="form-group">
                            <div class="col-lg-12">
                                <button class="btn btn-sm btn-primary pull-left m-t-n-xs" type="submit">
                                    <strong>Create</strong>
                                </button>

                                @Html.ActionLink("Back to List", "Index", null, htmlAttributes: new { @class = "btn btn-sm btn-primary pull-right m-t-n-xs" })
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<br/>
<input type="hidden" id="PStartDate" name="PStartDate" value=""  />
<input type="hidden" id="PEndDate"   name="PEndDate"   value=""  />
<br/>

    <script type="text/javascript">
        $(document).ready(
        function () {
            $('#StartDate').datepicker({
                changeMonth: true,
                changeYear: true,
                minDate: "-15w",
                dateFormat: "dd-M-yy" /*format: 'dd-M-yyyy'*/
            });

            $('#Deadline').datepicker({
                changeMonth: true,
                changeYear: true,
                numberOfMonths: 1,
                dateFormat: "dd-M-yy"
            });

            $("#frmMain").validate({
                rules: {
                    StartDate: { required: true },
                    Deadline: { required: true },
                    SName: {
                        minlength: 3,
                        maxlength: 250,
                        required: true
                    },
                    LocationId: { required: true },
                    CompanyId: { required: true },
                    AreaId: { required: true },
                    BucketId: { required: true },
                    TaskTypeId: { required: true },
                    StatusId: { required: true },
                },
                highlight: function (element) {
                    $(element).closest('.control-group').addClass('has-error');
                },
                unhighlight: function (element) {
                    $(element).closest('.control-group').removeClass('has-error');
                },
                submitHandler: function (form) { // for demo
                    form.submit();
                    return false;
                }
            });
        });

        function FillCompany            (obj)                {
            var sel = obj.options[obj.selectedIndex].value;
            if (sel == "") {
                $("#CompanyId").empty();
                $("#CompanyId").prop("disabled", true);
                return;
            }

            var postedContent = { SelectedLocation: sel }
            $.ajax({
                type: "POST",
                url: "/Tasks/GetCompaniesByLocation",
                data: postedContent,
                success: function (message) {
                    var res = message.data;
                    if (res.length > 0) {
                        $("#CompanyId").prop("disabled", false);
                        $("#CompanyId").empty()
                        for (var i = 0; i < message.data.length; i++) {
                            $('#CompanyId').append($('<option>', { value: message.data[i].CompanyId, text: message.data[i].CompanyName }));
                        } // end of for loop
                    } // end of if for length
                },
                error: function (xerr) {
                    /* $('#txteng').val("err : " +xerr);*/
                }
            });

        }

        function FillSubArea            (obj) {
            var sel = obj.options[obj.selectedIndex].value;
            var selText = obj.options[obj.selectedIndex].text
            if (sel == "") {
                $("#SubAreaId").empty();
                $("#SubAreaId").prop("disabled", true);
                return;
            }

            var postedContent = { SelectedArea: sel }
            $.ajax({
                type: "POST",
                url: "/Tasks/GetSubAreaByArea",
                data: postedContent,
                success: function (message) {

                    var dv = message.DvDetail;
                    document.getElementById("dvDetails").innerHTML = "Add New Task [Division >> " + dv + "]";



                    var res = message.data;
                    $("#SSubAreaId").prop("disabled", false);
                    $("#SSubAreaId").empty();
                    if (res.length > 0) {
                        for (var i = 0; i < message.data.length; i++) {
                            $('#SSubAreaId').append($('<option>', { value: message.data[i].SubAreaId, text: message.data[i].SubAreaName }));
                        } // end of for loop
                    } // end of if for length
                    else {
                        $('#SSubAreaId').append($('<option>', { value: '', text: "No Sub Area For " + selText }));
                    }
                },
                error: function (xerr) {
                    /* $('#txteng').val("err : " +xerr);*/
                }
            });

        }

        function FillBucket             (obj) {
            var sel = obj.options[obj.selectedIndex].value;
            var selText = obj.options[obj.selectedIndex].text
            if (sel == "") {
                $("#lblProjectDetails").empty();
                return;
            }

            var postedContent = { SelectedBucket: sel }
            $.ajax({
                type: "POST",
                url: "/Tasks/GetBucketDetails",
                data: postedContent,
                success: function (message) {

                    document.getElementById("Locatoin").value = message.LocationName;
                    document.getElementById("Company").value = message.CompanyName;
                    document.getElementById("Division").value = message.DivisionName;
                    document.getElementById("Area").value = message.AreaName;
                    document.getElementById("SubArea").value = message.SubAreaName;

                    document.getElementById("Project").value = message.ProjectName;
                    document.getElementById("Phase").value = message.PhaseName;
                    document.getElementById("SubPhase").value = message.SubPhaseName;


                    $('#StartDate').datepicker('destroy');
                    $('#Deadline').datepicker('destroy');

                    $('#PStartDate').empty();
                    $("#PEndDate")  .empty();

                    var st = message.StartDate;
                    var ed = message.EndDate;

                    $("#PStartDate").val(parseJsonDate(st));
                    $("#PEndDate")  .val(parseJsonDate(ed));

                    ReActivateDatePickers(st, ed);

                },
                error: function (xerr) {
                    /* $('#txteng').val("err : " +xerr);*/
                }
            });

        }

        function FillProjectDetails     (obj) {
            var sel = obj.options[obj.selectedIndex].value;
            if (sel == "") { return; }

            var postedContent = { ProjectId: sel }
            $.ajax({
                type: "POST",
                url: "/Phase/GetProjectPhases",
                data: postedContent,
                success: function (message) {
                    $("#PhaseId").prop('disabled', false);
                    $("#PhaseId").empty();
                    $('#PhaseId').append($('<option>', { value: '', text: 'Select Phase', selected: true }));
                    var res = message.data;

                    if (res.length > 0) {
                        for (var i = 0; i < message.data.length; i++) {
                            $('#PhaseId').append($('<option>', { value: message.data[i].PhaseId, text: message.data[i].PhaseName }));
                        } // end of for loop
                    } // end of if for length
                },
                error: function (xerr) {
                    /* $('#txteng').val("err : " +xerr);*/
                }
            });

        }

        function ReActivateDatePickers  (StartDate, EndDate) {
            //alert(StartDate + " < - > " + EndDate);

            $("#StartDate").datepicker({
                changeMonth: true,
                changeYear: true,
                minDate: new Date($('#PStartDate').val()),
                maxDate: new Date($('#PEndDate').val()),
                dateFormat: "dd-M-yy" /*format: 'dd-M-yyyy'*/
            });

            $("#Deadline").datepicker({
                changeMonth: true,
                changeYear: true,
                minDate: new Date($('#PStartDate').val()),
                maxDate: new Date($('#PEndDate').val()),
                dateFormat: "dd-M-yy" /*format: 'dd-M-yyyy'*/
            });


        }

        function parseJsonDate          (jsonDateString) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

            jsonDateString = jsonDateString.replace('/Date(', '');
            jsonDateString = jsonDateString.replace(')/', '');
            var date = new Date(parseInt(jsonDateString));
            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();
            return day + "-" + monthNames[monthIndex] + "-" + year;
        }
    </script>


    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
